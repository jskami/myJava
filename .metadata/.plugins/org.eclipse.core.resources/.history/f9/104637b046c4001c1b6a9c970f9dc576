package sort;

public class Insertion {
//    public static void sort(int[] arr) {
//        for (int end = 1; end < arr.length; end++) {
//            for (int i = end; i > 0; i--) {
//                if (arr[i - 1] > arr[i])
//                    swap(arr, i - 1, i);
//            }
//        }
//    }
//
//    private static void swap(int[] arr, int a, int b) {
//        int tmp = arr[a];
//        arr[a] = arr[b];
//        arr[b] = tmp;
//    }
//    
    
    // ================================================
    
//	public static void main(String[] args) {
//		int[] arr = {8, 2, 1, 4, 5};
//		
//		System.out.println(arr[2] + "\n");
//				
//		if(arr.length > 1) {
//			int i, j;
//			for(i=1; i<arr.length; i++) {
//				int tmp = arr[i];
//				for(j=i-1; j>=0; j--) {
//					arr[j+1] = arr[j];
//					if(tmp > arr[j]) {
//						break;
//					}
//				}
//				arr[j+1] = tmp;
//			}
//		}
//		
//		for(int i=0; i<arr.length; i++) {
//			System.out.print(arr[i]);
//			if(i+1 != arr.length) {
//				System.out.print(", ");
//			}
//		}
//	}
	
	Comm comm = new Comm();
	   
	  void insertSort(int[] testArray){
	    int key;
	    int i,j;
	     
	    for(j=1; j< testArray.length; j++){
	      key = testArray[j];
	      i= j-1;
	      while(i>=0 && testArray[i]>key ){ // 바로 이전값이 더 크다면 0~이전index값 비
	        testArray[i+1] = testArray[i];
	        i = i-1;//index가 0인 자리까지 찾기위해 i-1을 해준다.
	      }
	      testArray[i+1] = key;
	    }
	     
	  }

	
}
