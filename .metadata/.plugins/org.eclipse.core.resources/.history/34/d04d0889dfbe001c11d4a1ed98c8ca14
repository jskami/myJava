package sort;

import java.util.Scanner;

public class HeapSort {
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("정렬할 요소의 수 : ");
		
		int n = sc.nextInt();
		int[] arr = new int[n];
		
		// 요소 입력받기
		for(int i = 0; i < n; i++) {
			arr[i] = sc.nextInt();
		}
		
		heapSort(arr, n);
		
		System.out.println("정렬 완료");
		
		// 정렬 후 출력
		for(int i = 0; i < n; i++) {
			System.out.println(arr[i] + " ");
		}
	}
	
	static void heapSort(int[] arr, int n) {
		
		// 힙 구조로 구성 (Build Max - heap)
		heapify(arr, n);
		
		// 루트 제거하고 마지막 요소를 루트로 옮김 (Extract - Max)
		for(int i=n-1; i>=0; i--) {
			swap(arr, 0, i);
			heapify(arr, i);
		}
	}
	
	// Build Max-heap
	static void heapify(int[] arr, int last) { // last : 마지막 인덱스
		for(int i = 1; i < last; i++) {
			int child = i;
			
			while(child > 0 ) {
				int parent = (child - 1)/2;
				
				if(arr[child] > arr[parent]) { // 부모와 비교해서 자식이 크다면
					swap(arr, child, parent);  // swap
				}
				child = parent;
			}
		}
	}
	
	// 배열의 요소 두 개의 위치 교체
	static void swap(int[] arr, int i, int j) {
		int tmp = arr[i];
		[i] = [j];
		[j] = tmp;
	}
	
	
		
}
