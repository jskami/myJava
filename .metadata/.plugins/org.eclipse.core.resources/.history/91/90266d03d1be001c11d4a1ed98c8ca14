package sort;

public class HeapSort {
	
	public static void main(String[] args) {
	
		// 정렬되지 않은 배열
		int[] arr = {5, 8, 4, 7, 10, 9, 2, 1, 6, 3};
			
		// maxHeap / 부모노드 값 > 자식노드 값 / i의 초기값 = 배열 맨 끝 자식노드의 부모노드부터 시작
		for(int i = arr.length/2 - 1; i >= 0; i--) {
			heapify(arr, arr.length, i);
		}
		
		// 정렬
		for(int i = arr.length - 1; i >= 0; i--) {
			swap(arr, i, 0);	// 최상단 노드와 최하단 노드 값 교환
			heapify(arr, i, 0); // 루트노드를 기준으로 최대 힙 만들기
		}
		
		// 출력
		for(int i = 0; i < arr.length; i++) {
			System.out.println(arr[i] + " ");
		}
	}
	
	public static void heapify(int[] arr, int size, int pNode) {
		int parent = pNode;
		int lNode = pNode * 2 + 1;
		int rNode = pNode * 2 + 2;
		int childNode = 0;
		
		// 자식 노드 중 가장 큰 노드 찾기
		if(size > lNode && size > rNode) {
			childNode = arr[lNode] > arr[rNode] ? lNode : rNode;
		} else if(size > lNode && size <= rNode) {
			childNode = lNode;
		}
		
		
		
	}
		
}
